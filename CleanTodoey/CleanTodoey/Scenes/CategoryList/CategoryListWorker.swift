//
//  CategoryListWorker.swift
//  CleanTodoey
//
//  Created by JoÃ£o Pedro Giarrante on 25/10/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PromiseKit
import RealmSwift

protocol CategoryListDatabaseLogic {
    
    // MARK: Fetch Categories
    func fetchCategories() -> Promise<CategoryListModel.FetchCategories.Response>
    
    // MARK: Update Categories
    func updateCategories(with request: CategoryListModel.UpdateCategories.Request) -> Promise<CategoryListModel.UpdateCategories.Response>
    
    // MARK: Filter Categories
    func filterCategories(with request: CategoryListModel.FilterCategories.Request) -> Promise<CategoryListModel.FilterCategories.Response>
}

class CategoryListWorker: CategoryListDatabaseLogic {
    
    // MARK: Properties
    let realm = try! Realm()
    
    
    // MARK: Fetch Categories
    func fetchCategories() -> Promise<CategoryListModel.FetchCategories.Response> {
        return Promise { seal in
            let response = CategoryListModel.FetchCategories.Response(categories: realm.objects(Category.self))
            seal.fulfill(response)
        }
    }
    
    
    // MARK: Update Categories
    func updateCategories(with request: CategoryListModel.UpdateCategories.Request) -> Promise<CategoryListModel.UpdateCategories.Response> {
        return Promise { seal in
            do {
                if(request.method == CategoryListModel.UpdateCategories.Request.Method.add) {
                    try realm.write {
                        realm.add(request.category)
                        seal.fulfill(CategoryListModel.UpdateCategories.Response(addedCategory: request.category))
                    }
                } else if(request.method == CategoryListModel.UpdateCategories.Request.Method.remove) {
                    try realm.write {
                        realm.delete(request.category)
                        seal.fulfill(CategoryListModel.UpdateCategories.Response(removedCategory: request.category))
                    }
                }
                
            } catch {
                seal.reject(error)
            }
        }
    }
    
    
    // MARK: Filter Categories
    func filterCategories(with request: CategoryListModel.FilterCategories.Request) -> Promise<CategoryListModel.FilterCategories.Response> {
        return Promise { seal in
            guard let filter = request.text else { return }
            let filteredCategories = realm.objects(Category.self).filter("name BEGINSWITH[cd] %@", filter).sorted(byKeyPath: "name", ascending: true)
            let response = CategoryListModel.FilterCategories.Response(categories: filteredCategories)
            seal.fulfill(response)
        }
    }
}
