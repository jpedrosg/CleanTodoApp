//
//  CategoryListViewController.swift
//  CleanTodoey
//
//  Created by Jo√£o Pedro Giarrante on 25/10/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift

// MARK: - CategoryListDisplayLogic

protocol CategoryListDisplayLogic: class {
    
    // MARK: Display Categories
    func displayCategoriesSuccess(_ viewModel: CategoryListModel.FetchCategories.ViewModel)
    func displayCategoriesError(_ viewModel: CategoryListModel.FetchCategories.ViewModel)
    
    // MARK: Display Update Categories
    func displayUpdateCategoriesSuccess(_ viewModel: CategoryListModel.UpdateCategories.ViewModel)
    func displayUpdateCategoriesError(_ viewModel: CategoryListModel.UpdateCategories.ViewModel)
    
    // MARK: Display Update Categories
    func displayTodoList()
}


// MARK: - CategoryListViewController

class CategoryListViewController: UITableViewController {
    
    
    // MARK: Object properties
    let realm = try! Realm()
    var categories: Array<Category>?
    var interactor: CategoryListBusinessLogic?
    var router: (NSObjectProtocol & CategoryListRoutingLogic & CategoryListDataPassing)?
    final let NULL_CATEGORIES_COUNT = 0
    final let DELETE_TITLE = "Delete"
    final let CELL_IDENTIFIER = "Cell"
    final let SEGUE_TO_TODOLIST = "TodoList"
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CategoryListInteractor()
        let presenter = CategoryListPresenter()
        let router = CategoryListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        searchBar.delegate = self
        getCategories()
    }
    
    
    // MARK: IBOutlets
    @IBOutlet weak var searchBar: UISearchBar!
    
    
    
    // MARK: IBActions
    
    @IBAction func addButtonPressed(_ sender: UIBarButtonItem) {
        var textField = UITextField()
        let alert = UIAlertController(title: "Add a New Cateogry", message: "", preferredStyle: .alert)
        let action = UIAlertAction(title: "Add", style: .default) { (action) in
            // New Category:
            let newCategory = Category()
            newCategory.name = textField.text!
            let request = CategoryListModel.UpdateCategories.Request(method: CategoryListModel.UpdateCategories.Request.Method.add, category: newCategory)
            self.updateCategories(request)
        }
        alert.addAction(action)
        alert.addTextField { (field) in
            textField = field
            textField.placeholder = "Add a new category"
        }
        present(alert, animated: true, completion: nil)
    }
    
    
    // MARK: Requests
    
    fileprivate func getCategories() {
        interactor?.fetchCategories()
    }
    
    fileprivate func filterCategories(filter: String) {
        interactor?.filterCategories(with: CategoryListModel.FilterCategories.Request(text: filter))
    }
    
    fileprivate func updateCategories(_ request: CategoryListModel.UpdateCategories.Request) {
        self.interactor?.updateCategories(with: request)
    }
    
    // MARK: Screen Changes
    
    fileprivate func updateModel(at indexPath: IndexPath) {
        if let categoryForDeletion = self.categories?[indexPath.row] {
            let request = CategoryListModel.UpdateCategories.Request(method: CategoryListModel.UpdateCategories.Request.Method.remove, category: categoryForDeletion)
            self.interactor?.updateCategories(with: request)
        }
    }
    
    
    // MARK: - UITableViewController
    override func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        let contextItem = UIContextualAction(style: .destructive, title: DELETE_TITLE) {  (contextualAction, view, boolValue) in
            self.updateModel(at: indexPath)
        }
        let swipeActions = UISwipeActionsConfiguration(actions: [contextItem])
        return swipeActions
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return categories?.count ?? NULL_CATEGORIES_COUNT
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: CELL_IDENTIFIER, for: indexPath)
        cell.selectionStyle = .default
        cell.textLabel?.text = categories![indexPath.row].name
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        interactor?.didSelectRow(index: indexPath.row)
    }
}


// MARK: - CategoryListDisplayLogic

extension CategoryListViewController: CategoryListDisplayLogic{
    
    // MARK: Display Categories
    
    func displayCategoriesSuccess(_ viewModel: CategoryListModel.FetchCategories.ViewModel) {
        self.categories = viewModel.categories
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    
    func displayCategoriesError(_ viewModel: CategoryListModel.FetchCategories.ViewModel) {
        if let error = viewModel.errorString {
            print(error)
        }
    }
    
    
    // MARK: Display Update Categories

    func displayUpdateCategoriesSuccess(_ viewModel: CategoryListModel.UpdateCategories.ViewModel) {
        categories = viewModel.categories
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    
    func displayUpdateCategoriesError(_ viewModel: CategoryListModel.UpdateCategories.ViewModel) {
        if let error = viewModel.errorString {
            print(error)
        }
    }
    
    
    // MARK: Display Update Categories
    func displayTodoList() {
        performSegue(withIdentifier: SEGUE_TO_TODOLIST, sender: self)
    }
}

// MARK: - UISearchBarDelegate

extension CategoryListViewController: UISearchBarDelegate{
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        guard let filter = searchBar.text else { return }
        
        if filter != "" {
            self.filterCategories(filter: filter)
        } else {
            self.getCategories()
        }
    }
}
