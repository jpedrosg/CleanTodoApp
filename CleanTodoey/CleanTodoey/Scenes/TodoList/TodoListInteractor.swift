//
//  TodoListInteractor.swift
//  CleanTodoey
//
//  Created by Jo√£o Pedro Giarrante on 25/10/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TodoListBusinessLogic {
    
    // MARK: Fetch Items
    func fetchItems(with request: TodoListModel.FetchItems.Request)
    
    // MARK: Update Items
    func updateItems(with request: TodoListModel.UpdateItems.Request)
    
    // MARK: DidSelect Row
    func didSelectRow(index: Int)
    
    // MARK: Get Selected Category
    func getSelectedCategory()
}

protocol TodoListDataStore {
    var selectedCategory: Category { get set }
}

class TodoListInteractor: TodoListBusinessLogic, TodoListDataStore {

    // MARK: Properties
    var selectedCategory: Category = Category()
    var presenter: TodoListPresentationLogic?
    var worker: TodoListWorker?
    
    
    // MARK: Fetch Items
    
    func fetchItems(with request: TodoListModel.FetchItems.Request) {
        let finalRequest = TodoListModel.FetchItems.Request(currentCategory: self.selectedCategory)
        worker = TodoListWorker()
        _ = worker?.fetchItems(with: finalRequest)
            .done(handleFetchItems)
    }
    
    private func handleFetchItems(response: TodoListModel.FetchItems.Response){
        presenter?.presentItems(response)
    }
    
    
    // MARK: Update Items
    
    func updateItems(with request: TodoListModel.UpdateItems.Request) {
        let finalRequest = TodoListModel.UpdateItems.Request(method: request.method, item: request.item, currentCategory: self.selectedCategory)
        worker = TodoListWorker()
        worker?.updateItems(with: finalRequest)
            .done(handleUpdateItemsSuccess)
            .catch(handleUpdateItemsError)
    }
    
    private func handleUpdateItemsSuccess(response: TodoListModel.UpdateItems.Response){
        presenter?.presentUpdateItems(response)
    }
    
    private func handleUpdateItemsError(error: Error){
        let response = TodoListModel.UpdateItems.Response(error: error)
        presenter?.presentUpdateItems(response)
    }
    
    
    // MARK: DidSelect Row

    func didSelectRow(index: Int) {
//        guard let item = items?[index] else { return }
//        selectedItem = item
//        presenter?.presentTodoList()
    }
    
    
    // MARK: Get Selected Category
    func getSelectedCategory() {
        let response = TodoListModel.GetSelectedCategory.Response(selectedCategory: self.selectedCategory)
        presenter?.presentSelectedCategory(response)
    }
}
