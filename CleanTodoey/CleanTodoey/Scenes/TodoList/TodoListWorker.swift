//
//  TodoListWorker.swift
//  CleanTodoey
//
//  Created by JoÃ£o Pedro Giarrante on 25/10/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PromiseKit
import RealmSwift

protocol TodoListDatabaseLogic {
    
    // MARK: Fetch Items
    func fetchItems(with request: TodoListModel.FetchItems.Request) -> Promise<TodoListModel.FetchItems.Response>
    
    // MARK: Update Items
    func updateItems(with request: TodoListModel.UpdateItems.Request) -> Promise<TodoListModel.UpdateItems.Response>
    
    // MARK: Reorder Items
    func reorderItems(with request: TodoListModel.ReorderItems.Request) -> Promise<TodoListModel.UpdateItems.Response>
}

class TodoListWorker: TodoListDatabaseLogic {
    
    // MARK: Properties
    let realm = try! Realm()
    final let KEY_PATH = "title"
    
    
    // MARK: Fetch Items
    func fetchItems(with request: TodoListModel.FetchItems.Request) -> Promise<TodoListModel.FetchItems.Response> {
        return Promise { seal in
            let items = request.currentCategory!.items.sorted(byKeyPath: KEY_PATH, ascending: true)
            let response = TodoListModel.FetchItems.Response(items: items)
            seal.fulfill(response)
        }
    }
    
    
    // MARK: Update Items
    func updateItems(with request: TodoListModel.UpdateItems.Request) -> Promise<TodoListModel.UpdateItems.Response> {
        return Promise { seal in
            do {
                if(request.method == TodoListModel.UpdateItems.Request.Method.add) {
                    try realm.write {
                        request.currentCategory!.items.append(request.item)
                        seal.fulfill(TodoListModel.UpdateItems.Response(updatedCategory: request.currentCategory!))
                    }
                } else if(request.method == TodoListModel.UpdateItems.Request.Method.remove) {
                    try realm.write {
                        realm.delete(request.item)
                        seal.fulfill(TodoListModel.UpdateItems.Response(updatedCategory: request.currentCategory!))
                    }
                }
            } catch {
                seal.reject(error)
            }
        }
    }
    
    
    // MARK: Reorder Items
    func reorderItems(with request: TodoListModel.ReorderItems.Request) -> Promise<TodoListModel.UpdateItems.Response> {
        return Promise { seal in
            try realm.write {
                if let indexFrom = request.from, let indexTo = request.to {
                    let movedItem = request.currentCategory.items[indexFrom]
                    request.currentCategory.items.remove(at: indexFrom)
                    request.currentCategory.items.insert(movedItem, at: indexTo)
                    seal.fulfill(TodoListModel.UpdateItems.Response(updatedCategory: request.currentCategory))
                }
            }
        }
    }
}
